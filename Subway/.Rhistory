type="one.sample",
alternative = "one.sided")
# d
power.t.test(n = 27, delta = 9-8, sd = 2.4,power = 0.875,
type="one.sample",
alternative = "one.sided")
# d
power.t.test(n = 27, delta = 9-8, sig.level = NULL,sd = 2.4,power = 0.875,
type="one.sample",
alternative = "one.sided")
# d
power.t.test(n = NULL, delta = 9-8, sig.level = 0.05,sd = 2.4,power = 0.875,
type="one.sample",
alternative = "one.sided")
##### 3
# a
population <- seq( 0.3,0.4,0.001)
?qbinom
# b
rejection_number_.05_50 = qbinom(.05, 1200, 0.3)
# a
population <- seq( 0.3,0.4,0.001)
# b
z_0.05 <-qbinom(.05, 1200, 0.3)
# b
z_0.05 <- qnorm(0.05)
# b
z_0.05 <- qnorm(0.025,lower.tail = FALSE)
# b
z_0.05 <- qnorm(0.05/2,lower.tail = FALSE)
z_0.01 <- qnorm(0.01/2,lower.tail = FALSE)
z_0.05
z_0.01
# c
p_5 <- 0.3 + z_0.05 * sqrt(0.3*0.7/1200)
p_1 <- 0.3 + z_0.01 * sqrt(0.3*0.7/1200)
p_5
p_1
# d
beta_5 <- pnorm(p_5, mean = mean(population), sd = sd(population)/sqrt(1200))
beta_5
# 1.833172e-178
# e
beta_1 <- pnorm(p_1, mean = mean(population), sd = sd(population)/sqrt(1200))
beta_1
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
pnorm(p_5, mean = mean(population), sd = sd(population)/sqrt(1200))
# d
beta_5 <- pnorm(p_5, mean = mean(population)-0.3, sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(p_1, mean = mean(population)-0.3, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# d
beta_5 <- pnorm(population, mean = mean(population)-0.3, sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = mean(population)-0.3, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# d
beta_5 <- pnorm(population, mean = mean(population), sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# e
beta_1 <- pnorm(population, mean = mean(population), sd = sd(population)/sqrt(1200))
plot(population,beta_1, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# d
beta_5 <- pnorm(population, mean = mean(population)-p_5, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# d
beta_5 <- pnorm(population, mean = p_5- mean(population), sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1-mean(population), sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
power.prop.test(n = 1200, delta = 0.02, sig.level = 0.05,sd = sd(population),
type="one.sample",
alternative = "one.sided")
power.prop.test(n = 1200, p1 = 0.3, p2=0.7, sig.level = 0.05,sd = sd(population),
type="one.sample",
alternative = "one.sided")
power.prop.test(n = 1200, p1 = 0.3, p2=0.7, sig.level = 0.05,
type="one.sample",
alternative = "one.sided")
power.prop.test(n = 1200, p1 = 0.3, p2=0.7, sig.level = 0.05,
alternative = "one.sided")
power.prop.test(n = 1200, delta = 0.02, sig.level = 0.05,sd = sd(population),
type="one.sample",
alternative = "one.sided")
power.t.test(n = 1200, delta = 0.02, sig.level = 0.05,sd = sd(population),
type="one.sample",
alternative = "one.sided")
power.t.test(n = 1200, delta = 0.02, sig.level = 0.01,sd = sd(population),
type="one.sample",
alternative = "one.sided")
power.t.test(n = 1200, delta = 0, sig.level = 0.01,sd = sd(population),
type="one.sample",
alternative = "one.sided")
power.t.test(n = 1200, delta = 0.02, sig.level = 0.01,sd = sd(population),
type="one.sample",
alternative = "one.sided")
power.t.test(n = 1200, delta = 0.01, sig.level = 0.01,sd = sd(population),
type="one.sample",
alternative = "one.sided")
power.t.test(n = 1200, delta = 0.5, sig.level = 0.01,sd = sd(population),
type="one.sample",
alternative = "one.sided")
means <- seq(7, 9, by = 0.1)
z_7.4 <- (7.4-means)/(1.2/sqrt(50))
beta_7.4 <- pnorm(z_7.4)
plot(means, beta_7.4, type="l", xlab = "Possible Means", ylab = "P(Type II Error) where c = 7.4")
z_7.2 <- (7.2-means)/(1.2/sqrt(50))
beta_7.2 <-pnorm(z_7.2)
# Plot both curves on one graph
plot(means, beta_7.4, type="l", col="blue", ylim=c(0,1), ylab="P(Type II Error)")
par(new=TRUE)
plot(means, beta_7.2, type="l", col="red", ylim=c(0,1), ylab="P(Type II Error)")
abline(v = 7.3) # what critical value should be if alpha = 0.05
# d
beta_5 <- pnorm(population, mean = p_5, sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# d
beta_5 <- pnorm(population, mean = p_5-mean, sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1-mean, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# d
beta_5 <- pnorm(population, mean = p_5-mean(population), sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1-mean(population), sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
# e
beta_1 <- pnorm(population, mean = p_1, sd = sd(population)/sqrt(1200))
# d
beta_5 <- pnorm(population, mean = p_5, sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
par(new=FALSE)
# d
beta_5 <- pnorm(population, mean = p_5-mean(population), sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1-mean(population), sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
# d
beta_5 <- pnorm(population, mean = p_5, sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
par(new=FALSE)
# Plot both curves on one graph
plot(means, beta_7.4, type="l", col="blue", ylim=c(0,1), ylab="P(Type II Error)")
par(new=TRUE)
plot(means, beta_7.2, type="l", col="red", ylim=c(0,1), ylab="P(Type II Error)")
abline(v = 7.3) # what critical value should be if alpha = 0.05
legend(x = "topright", col = c("blue","red"), lty = c(1,1), bty = "n",
legend = c("beta_7.4","beta_7.2"))
alpha_7.4 <- 1-beta_7.4[1]
alpha_7.2 <- 1-beta_7.2[1]
alpha_7.4
alpha_7.2
# b
power.t.test(n = 27, delta = 9-8, sig.level = 0.1, sd = 2.4,
type="one.sample",
alternative = "one.sided")
##### 1
# a
# Hypotheses : proportion of A fails is different than proportion of B fails
# H0: pA = pB
# H1: pA != pB
#b
# Type I error is when the decision is that proportion of A fails
# is different than proportion of B fails ( reject H0) but in reality
# proportion of A fails is same as proportion of B fails (H0)
#c
# Type I error is when the decision is that proportion of A fails is
# same as proportion of B fails ( accept H0) but in reality
# proportion of A fails is different than proportion of B fails ( H1)
##### 2
# a
# Hypotheses :
# H0: mu = 8
# H1: mu > 8
# b
power.t.test(n = 27, delta = 9-8, sig.level = 0.1, sd = 2.4,
type="one.sample",
alternative = "one.sided")
# One-sample t test power calculation
#
# n = 27
# delta = 1
# sd = 2.4
# sig.level = 0.1
# power = 0.8020171
# alternative = one.sided
# power is 0.8020171 when mu is 9, alpha is 0.1
# c
power.t.test(n = 27, delta = 9-8, sig.level = 0.05, sd = 2.4,
type="one.sample",
alternative = "one.sided")
# One-sample t test power calculation
#
# n = 27
# delta = 1
# sd = 2.4
# sig.level = 0.05
# power = 0.6784369
# alternative = one.sided
# 1
# power is 0.6784369 when mu is 9, alpha is 0.05
# 2
# the chance of type II error is reduced when the chance of type I error is smaller
# d
power.t.test(n = 27, delta = 9-8, sig.level = NULL,sd = 2.4,power = 0.875,
type="one.sample",
alternative = "one.sided")
# One-sample t test power calculation
#
# n = 27
# delta = 1
# sd = 2.4
# sig.level = 0.1601469
# power = 0.875
# alternative = one.sided
# 1
# alpha is 0.1601469  when power is 0.875
# 2
# the chance of type I error is increase when the chance of type II error is bigger
# d
power.t.test(n = NULL, delta = 9-8, sig.level = 0.05,sd = 2.4,power = 0.875,
type="one.sample",
alternative = "one.sided")
# One-sample t test power calculation
#
# n = 46.38955
# delta = 1
# sd = 2.4
# sig.level = 0.05
# power = 0.875
# alternative = one.sided
# sample 47 people ( round up)
##### 3
# Hypotheses
# H0: p = 0.3
# H1: p > 0.3
# a
population <- seq( 0.3,0.4,0.001)
# b
z_0.05 <- qnorm(0.05/2,lower.tail = FALSE) # 1.959964
z_0.01 <- qnorm(0.01/2,lower.tail = FALSE) # 2.575829
# c
p_5 <- 0.3 + z_0.05 * sqrt(0.3*0.7/1200) # 0.3259279
p_1 <- 0.3 + z_0.01 * sqrt(0.3*0.7/1200) # 0.334075
# d
beta_5 <- pnorm(population, mean = p_5, sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
par(new=FALSE)
# i
# d
beta_5 <- pnorm(population, mean = p_5-mean(population),sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
par(new=FALSE)
# d
beta_5 <- pnorm(population, mean = p_5,sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
means <- seq(7,9,by=.1)  # potential values for the population mean.
z_7.4 <- (7.4-means)/(1.2/sqrt(50))  #scores for 7.4 for the values for the mean.
beta_7.4 <- pnorm(z_7.4) # probability the sample mean is less than 7.4 for the
beta_5 <- pnorm(population, mean = p_5-population,sd = sd(population)/sqrt(1200))
# e
beta_1 <- pnorm(population, mean = p_1-population, sd = sd(population)/sqrt(1200))
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
par(new=FALSE)
# d
z_5 <- (p_5-population)/( sd(population)/sqrt(1200))
beta_5 <- pnorm(z_5)
# e
z_1 <- (p_1-population)/( sd(population)/sqrt(1200))
beta_1 <- pnorm(z_1)
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
par(new=FALSE)
1-beta_1
1-beta_1[1]
1-beta_5[1]
1-beta_1[1]
beta_5 <- pbinom(p_5,1200,p=population, lower.tail = FALSE)
beta_1 <- pbinom(p_1,1200,p=population, lower.tail = FALSE)
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
1-beta_5[1]
1-beta_1[1]
# d
z_5 <- (p_5-population)/( sd(population)/sqrt(1200))
beta_5 <- pnorm(z_5)
# e
z_1 <- (p_1-population)/( sd(population)/sqrt(1200))
beta_1 <- pnorm(z_1)
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
1-beta_5[length(population)]
1-beta_1[length(population)]
1-beta_5[length(beta_5)]
1-beta_1[length(beta_1)]
rejection_number_.05_50 = qbinom(.05,50,.10)
beta_nut_.05_50 <- pbinom(rejection_number_.05_50,50,p=propvalues, lower.tail = FALSE)
rejection_number_.05_200 = qbinom(.05,200,.10)
beta_nut_.05_200 <- pbinom(rejection_number_.05_200,200,p=propvalues, lower.tail = FALSE)
plot(propvalues,beta_nut_.05_50, type="l", col="green", ylim=c(0,1), ylab="P(Type II Error)")
par(new=TRUE)
plot(propvalues,beta_nut_.05_200, type="l", col="blue", ylim=c(0,1), ylab="P(Type II Error)")
propvalues<-seq(.04,.10,by=.001)  # possible population proportions for which
rejection_number_.05_50 = qbinom(.05,50,.10)
beta_nut_.05_50 <- pbinom(rejection_number_.05_50,50,p=propvalues, lower.tail = FALSE)
rejection_number_.05_200 = qbinom(.05,200,.10)
beta_nut_.05_200 <- pbinom(rejection_number_.05_200,200,p=propvalues, lower.tail = FALSE)
plot(propvalues,beta_nut_.05_50, type="l", col="green", ylim=c(0,1), ylab="P(Type II Error)")
par(new=TRUE)
plot(propvalues,beta_nut_.05_200, type="l", col="blue", ylim=c(0,1), ylab="P(Type II Error)")
alpha_nut_.05_50 <- 1-beta_nut_.05_50[61]
alpha_nut_.05_200 <- 1-beta_nut_.05_200[61]
alpha_nut_.05_50
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
mean(population)
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.325)
# h
abline(v = 0.321)
# h
abline(v = 0.323)
# h
abline(v = 0.33)
# h
abline(v = 0.335)
# f
plot(population,beta_5, type="l", col="red", ylim=c(0,1), ylab="Beta Values")
# g
par(new=TRUE)
plot(population,beta_1, type="l", col="blue", ylim=c(0,1), ylab="Beta Values")
# h
abline(v = 0.32)
par(new=FALSE)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ahando2',
token='BDFDC4CBF28822C06EB5E93712019C78',
secret='H//yKz+a2hBLsIBSgRDwKwxrWB1umNC3OcUXyBuP')
rsconnect::setAccountInfo(name='ahando2',
token='BDFDC4CBF28822C06EB5E93712019C78',
secret='H//yKz+a2hBLsIBSgRDwKwxrWB1umNC3OcUXyBuP')
rsconnect::setAccountInfo(name='ahando2', token='BDFDC4CBF28822C06EB5E93712019C78', secret='H//yKz+a2hBLsIBSgRDwKwxrWB1umNC3OcUXyBuP')
library(colorBlindness)
install.packages(colorBlindness)
remotes::install_github("wilkelab/cowplot")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
install.packages(remotes)
install.packages("remotes")
remotes::install_github("wilkelab/cowplot")
remotes::install_github("wilkelab/cowplot")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
shiny::runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 1/Shiny')
runApp('D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 1/Shiny')
library(rsconnect)
rsconnect::setAccountInfo(name='ahando2', token='BDFDC4CBF28822C06EB5E93712019C78', secret='H//yKz+a2hBLsIBSgRDwKwxrWB1umNC3OcUXyBuP')
deployApp()
setwd("D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 1/Shiny")
deployApp()
setwd("D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 1")
echo "# CS-424-Project-1-Subway" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:ahando2/CS-424-Project-1-Subway.git
git push -u origin main
deployApp()
setwd("D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 1/Shiny")
deployApp()
rsconnect::setAccountInfo(name='ahando2', token='8B076A09F1134A029D464360E493826D', secret='5X4In8wV9lo2FHZFoiWGbiheh9h6oyjrYvPvZ1UZ')
deployApp()
library(lubridate)
setwd("D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 1")
CTA_daily <- read.table(file = "CTA_-_Ridership_-__L__Station_Entries_-_Daily_Totals.tsv",sep='\t',quote="", header = TRUE)
# change first column name from `ï..station_id` to `station_id`
colnames(CTA_daily)[1] <- "station_id"
# check if any of the data is missing
subset(CTA_daily , is.na(CTA_daily))
# format the date
CTA_daily <- CTA_daily[complete.cases(CTA_daily), ]
CTA_daily$date <- mdy(CTA_daily$date)
str(CTA_daily)
summary(CTA_daily)
dim(CTA_daily)
# station_names that will be saved
station_names <- c("UIC-Halsted","O'Hare Airport","Damen/Milwaukee")
CTA_daily[,c("stationname","date","rides")]
# get only columns stationname,date,rides
CTA_daily <- CTA_daily[,c("stationname","date","rides")]
# station_names that will be saved
station_names <- c("UIC-Halsted","O'Hare Airport","Damen/Milwaukee")
# save data for these 3 stations in each own files
for (station_name in station_names) {
CTA_subset <- subset(CTA_daily , stationname == station_name)
file_name <- ifelse(station_name == "Damen/Milwaukee","Shiny/Damen_Milwaukee",paste('Shiny/', station_name, sep=""))
write.table(CTA_subset, file=paste(file_name, ".tsv", sep=""), quote=FALSE, sep='\t')
}
deployApp()
setwd("D:/ahando2/classes/SPRING 2022/CS 424/Project/Project 1/Shiny")
